// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: rpcpb/rpc.proto

package rpcpb

import (
	context "context"
	commonpb "github.com/hideckies/hermit/pkg/protobuf/commonpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HermitRPCClient is the client API for HermitRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HermitRPCClient interface {
	// GENERAL
	SayHello(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Message, error)
	GetVersion(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Message, error)
	// OPERATOR
	OperatorRegister(ctx context.Context, in *Operator, opts ...grpc.CallOption) (*commonpb.Message, error)
	OperatorDeleteByUuid(ctx context.Context, in *commonpb.Uuid, opts ...grpc.CallOption) (*commonpb.Message, error)
	OperatorGetById(ctx context.Context, in *commonpb.Id, opts ...grpc.CallOption) (*Operator, error)
	OperatorGetAll(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (HermitRPC_OperatorGetAllClient, error)
	// LISTENER
	ListenerStart(ctx context.Context, in *Listener, opts ...grpc.CallOption) (*commonpb.Message, error)
	ListenerStartById(ctx context.Context, in *commonpb.Id, opts ...grpc.CallOption) (*commonpb.Message, error)
	ListenerStopById(ctx context.Context, in *commonpb.Id, opts ...grpc.CallOption) (*commonpb.Message, error)
	ListenerDeleteById(ctx context.Context, in *commonpb.Id, opts ...grpc.CallOption) (*commonpb.Message, error)
	ListenerGetById(ctx context.Context, in *commonpb.Id, opts ...grpc.CallOption) (*Listener, error)
	ListenerGetAll(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (HermitRPC_ListenerGetAllClient, error)
	// PAYLOAD
	PayloadImplantGenerate(ctx context.Context, in *PayloadImplant, opts ...grpc.CallOption) (*commonpb.Binary, error)
	PayloadStagerGenerate(ctx context.Context, in *PayloadStager, opts ...grpc.CallOption) (*commonpb.Binary, error)
	PayloadShellcodeGenerate(ctx context.Context, in *PayloadShellcode, opts ...grpc.CallOption) (*commonpb.Binary, error)
	// AGENT
	AgentGetById(ctx context.Context, in *commonpb.Id, opts ...grpc.CallOption) (*Agent, error)
	AgentGetAll(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (HermitRPC_AgentGetAllClient, error)
	AgentTaskList(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Message, error)
	// TASK
	TaskSetByAgentName(ctx context.Context, in *Task, opts ...grpc.CallOption) (*commonpb.Message, error)
	TaskClearByAgentName(ctx context.Context, in *Task, opts ...grpc.CallOption) (*commonpb.Message, error)
	TaskListByAgentName(ctx context.Context, in *Task, opts ...grpc.CallOption) (*commonpb.Message, error)
	// LOOT
	LootGetAll(ctx context.Context, in *Loot, opts ...grpc.CallOption) (*commonpb.Message, error)
	LootClearByAgentName(ctx context.Context, in *Loot, opts ...grpc.CallOption) (*commonpb.Message, error)
}

type hermitRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewHermitRPCClient(cc grpc.ClientConnInterface) HermitRPCClient {
	return &hermitRPCClient{cc}
}

func (c *hermitRPCClient) SayHello(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Message, error) {
	out := new(commonpb.Message)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) GetVersion(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Message, error) {
	out := new(commonpb.Message)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) OperatorRegister(ctx context.Context, in *Operator, opts ...grpc.CallOption) (*commonpb.Message, error) {
	out := new(commonpb.Message)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/OperatorRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) OperatorDeleteByUuid(ctx context.Context, in *commonpb.Uuid, opts ...grpc.CallOption) (*commonpb.Message, error) {
	out := new(commonpb.Message)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/OperatorDeleteByUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) OperatorGetById(ctx context.Context, in *commonpb.Id, opts ...grpc.CallOption) (*Operator, error) {
	out := new(Operator)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/OperatorGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) OperatorGetAll(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (HermitRPC_OperatorGetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &HermitRPC_ServiceDesc.Streams[0], "/rpcpb.HermitRPC/OperatorGetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &hermitRPCOperatorGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HermitRPC_OperatorGetAllClient interface {
	Recv() (*Operator, error)
	grpc.ClientStream
}

type hermitRPCOperatorGetAllClient struct {
	grpc.ClientStream
}

func (x *hermitRPCOperatorGetAllClient) Recv() (*Operator, error) {
	m := new(Operator)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hermitRPCClient) ListenerStart(ctx context.Context, in *Listener, opts ...grpc.CallOption) (*commonpb.Message, error) {
	out := new(commonpb.Message)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/ListenerStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) ListenerStartById(ctx context.Context, in *commonpb.Id, opts ...grpc.CallOption) (*commonpb.Message, error) {
	out := new(commonpb.Message)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/ListenerStartById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) ListenerStopById(ctx context.Context, in *commonpb.Id, opts ...grpc.CallOption) (*commonpb.Message, error) {
	out := new(commonpb.Message)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/ListenerStopById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) ListenerDeleteById(ctx context.Context, in *commonpb.Id, opts ...grpc.CallOption) (*commonpb.Message, error) {
	out := new(commonpb.Message)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/ListenerDeleteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) ListenerGetById(ctx context.Context, in *commonpb.Id, opts ...grpc.CallOption) (*Listener, error) {
	out := new(Listener)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/ListenerGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) ListenerGetAll(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (HermitRPC_ListenerGetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &HermitRPC_ServiceDesc.Streams[1], "/rpcpb.HermitRPC/ListenerGetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &hermitRPCListenerGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HermitRPC_ListenerGetAllClient interface {
	Recv() (*Listener, error)
	grpc.ClientStream
}

type hermitRPCListenerGetAllClient struct {
	grpc.ClientStream
}

func (x *hermitRPCListenerGetAllClient) Recv() (*Listener, error) {
	m := new(Listener)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hermitRPCClient) PayloadImplantGenerate(ctx context.Context, in *PayloadImplant, opts ...grpc.CallOption) (*commonpb.Binary, error) {
	out := new(commonpb.Binary)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/PayloadImplantGenerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) PayloadStagerGenerate(ctx context.Context, in *PayloadStager, opts ...grpc.CallOption) (*commonpb.Binary, error) {
	out := new(commonpb.Binary)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/PayloadStagerGenerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) PayloadShellcodeGenerate(ctx context.Context, in *PayloadShellcode, opts ...grpc.CallOption) (*commonpb.Binary, error) {
	out := new(commonpb.Binary)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/PayloadShellcodeGenerate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) AgentGetById(ctx context.Context, in *commonpb.Id, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/AgentGetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) AgentGetAll(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (HermitRPC_AgentGetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &HermitRPC_ServiceDesc.Streams[2], "/rpcpb.HermitRPC/AgentGetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &hermitRPCAgentGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HermitRPC_AgentGetAllClient interface {
	Recv() (*Agent, error)
	grpc.ClientStream
}

type hermitRPCAgentGetAllClient struct {
	grpc.ClientStream
}

func (x *hermitRPCAgentGetAllClient) Recv() (*Agent, error) {
	m := new(Agent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hermitRPCClient) AgentTaskList(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Message, error) {
	out := new(commonpb.Message)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/AgentTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) TaskSetByAgentName(ctx context.Context, in *Task, opts ...grpc.CallOption) (*commonpb.Message, error) {
	out := new(commonpb.Message)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/TaskSetByAgentName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) TaskClearByAgentName(ctx context.Context, in *Task, opts ...grpc.CallOption) (*commonpb.Message, error) {
	out := new(commonpb.Message)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/TaskClearByAgentName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) TaskListByAgentName(ctx context.Context, in *Task, opts ...grpc.CallOption) (*commonpb.Message, error) {
	out := new(commonpb.Message)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/TaskListByAgentName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) LootGetAll(ctx context.Context, in *Loot, opts ...grpc.CallOption) (*commonpb.Message, error) {
	out := new(commonpb.Message)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/LootGetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermitRPCClient) LootClearByAgentName(ctx context.Context, in *Loot, opts ...grpc.CallOption) (*commonpb.Message, error) {
	out := new(commonpb.Message)
	err := c.cc.Invoke(ctx, "/rpcpb.HermitRPC/LootClearByAgentName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HermitRPCServer is the server API for HermitRPC service.
// All implementations must embed UnimplementedHermitRPCServer
// for forward compatibility
type HermitRPCServer interface {
	// GENERAL
	SayHello(context.Context, *commonpb.Empty) (*commonpb.Message, error)
	GetVersion(context.Context, *commonpb.Empty) (*commonpb.Message, error)
	// OPERATOR
	OperatorRegister(context.Context, *Operator) (*commonpb.Message, error)
	OperatorDeleteByUuid(context.Context, *commonpb.Uuid) (*commonpb.Message, error)
	OperatorGetById(context.Context, *commonpb.Id) (*Operator, error)
	OperatorGetAll(*commonpb.Empty, HermitRPC_OperatorGetAllServer) error
	// LISTENER
	ListenerStart(context.Context, *Listener) (*commonpb.Message, error)
	ListenerStartById(context.Context, *commonpb.Id) (*commonpb.Message, error)
	ListenerStopById(context.Context, *commonpb.Id) (*commonpb.Message, error)
	ListenerDeleteById(context.Context, *commonpb.Id) (*commonpb.Message, error)
	ListenerGetById(context.Context, *commonpb.Id) (*Listener, error)
	ListenerGetAll(*commonpb.Empty, HermitRPC_ListenerGetAllServer) error
	// PAYLOAD
	PayloadImplantGenerate(context.Context, *PayloadImplant) (*commonpb.Binary, error)
	PayloadStagerGenerate(context.Context, *PayloadStager) (*commonpb.Binary, error)
	PayloadShellcodeGenerate(context.Context, *PayloadShellcode) (*commonpb.Binary, error)
	// AGENT
	AgentGetById(context.Context, *commonpb.Id) (*Agent, error)
	AgentGetAll(*commonpb.Empty, HermitRPC_AgentGetAllServer) error
	AgentTaskList(context.Context, *commonpb.Empty) (*commonpb.Message, error)
	// TASK
	TaskSetByAgentName(context.Context, *Task) (*commonpb.Message, error)
	TaskClearByAgentName(context.Context, *Task) (*commonpb.Message, error)
	TaskListByAgentName(context.Context, *Task) (*commonpb.Message, error)
	// LOOT
	LootGetAll(context.Context, *Loot) (*commonpb.Message, error)
	LootClearByAgentName(context.Context, *Loot) (*commonpb.Message, error)
	mustEmbedUnimplementedHermitRPCServer()
}

// UnimplementedHermitRPCServer must be embedded to have forward compatible implementations.
type UnimplementedHermitRPCServer struct {
}

func (UnimplementedHermitRPCServer) SayHello(context.Context, *commonpb.Empty) (*commonpb.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedHermitRPCServer) GetVersion(context.Context, *commonpb.Empty) (*commonpb.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedHermitRPCServer) OperatorRegister(context.Context, *Operator) (*commonpb.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorRegister not implemented")
}
func (UnimplementedHermitRPCServer) OperatorDeleteByUuid(context.Context, *commonpb.Uuid) (*commonpb.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorDeleteByUuid not implemented")
}
func (UnimplementedHermitRPCServer) OperatorGetById(context.Context, *commonpb.Id) (*Operator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorGetById not implemented")
}
func (UnimplementedHermitRPCServer) OperatorGetAll(*commonpb.Empty, HermitRPC_OperatorGetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method OperatorGetAll not implemented")
}
func (UnimplementedHermitRPCServer) ListenerStart(context.Context, *Listener) (*commonpb.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListenerStart not implemented")
}
func (UnimplementedHermitRPCServer) ListenerStartById(context.Context, *commonpb.Id) (*commonpb.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListenerStartById not implemented")
}
func (UnimplementedHermitRPCServer) ListenerStopById(context.Context, *commonpb.Id) (*commonpb.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListenerStopById not implemented")
}
func (UnimplementedHermitRPCServer) ListenerDeleteById(context.Context, *commonpb.Id) (*commonpb.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListenerDeleteById not implemented")
}
func (UnimplementedHermitRPCServer) ListenerGetById(context.Context, *commonpb.Id) (*Listener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListenerGetById not implemented")
}
func (UnimplementedHermitRPCServer) ListenerGetAll(*commonpb.Empty, HermitRPC_ListenerGetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenerGetAll not implemented")
}
func (UnimplementedHermitRPCServer) PayloadImplantGenerate(context.Context, *PayloadImplant) (*commonpb.Binary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayloadImplantGenerate not implemented")
}
func (UnimplementedHermitRPCServer) PayloadStagerGenerate(context.Context, *PayloadStager) (*commonpb.Binary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayloadStagerGenerate not implemented")
}
func (UnimplementedHermitRPCServer) PayloadShellcodeGenerate(context.Context, *PayloadShellcode) (*commonpb.Binary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayloadShellcodeGenerate not implemented")
}
func (UnimplementedHermitRPCServer) AgentGetById(context.Context, *commonpb.Id) (*Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentGetById not implemented")
}
func (UnimplementedHermitRPCServer) AgentGetAll(*commonpb.Empty, HermitRPC_AgentGetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method AgentGetAll not implemented")
}
func (UnimplementedHermitRPCServer) AgentTaskList(context.Context, *commonpb.Empty) (*commonpb.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentTaskList not implemented")
}
func (UnimplementedHermitRPCServer) TaskSetByAgentName(context.Context, *Task) (*commonpb.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSetByAgentName not implemented")
}
func (UnimplementedHermitRPCServer) TaskClearByAgentName(context.Context, *Task) (*commonpb.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskClearByAgentName not implemented")
}
func (UnimplementedHermitRPCServer) TaskListByAgentName(context.Context, *Task) (*commonpb.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskListByAgentName not implemented")
}
func (UnimplementedHermitRPCServer) LootGetAll(context.Context, *Loot) (*commonpb.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootGetAll not implemented")
}
func (UnimplementedHermitRPCServer) LootClearByAgentName(context.Context, *Loot) (*commonpb.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootClearByAgentName not implemented")
}
func (UnimplementedHermitRPCServer) mustEmbedUnimplementedHermitRPCServer() {}

// UnsafeHermitRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HermitRPCServer will
// result in compilation errors.
type UnsafeHermitRPCServer interface {
	mustEmbedUnimplementedHermitRPCServer()
}

func RegisterHermitRPCServer(s grpc.ServiceRegistrar, srv HermitRPCServer) {
	s.RegisterService(&HermitRPC_ServiceDesc, srv)
}

func _HermitRPC_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).SayHello(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).GetVersion(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_OperatorRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).OperatorRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/OperatorRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).OperatorRegister(ctx, req.(*Operator))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_OperatorDeleteByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).OperatorDeleteByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/OperatorDeleteByUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).OperatorDeleteByUuid(ctx, req.(*commonpb.Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_OperatorGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).OperatorGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/OperatorGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).OperatorGetById(ctx, req.(*commonpb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_OperatorGetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(commonpb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HermitRPCServer).OperatorGetAll(m, &hermitRPCOperatorGetAllServer{stream})
}

type HermitRPC_OperatorGetAllServer interface {
	Send(*Operator) error
	grpc.ServerStream
}

type hermitRPCOperatorGetAllServer struct {
	grpc.ServerStream
}

func (x *hermitRPCOperatorGetAllServer) Send(m *Operator) error {
	return x.ServerStream.SendMsg(m)
}

func _HermitRPC_ListenerStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Listener)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).ListenerStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/ListenerStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).ListenerStart(ctx, req.(*Listener))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_ListenerStartById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).ListenerStartById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/ListenerStartById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).ListenerStartById(ctx, req.(*commonpb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_ListenerStopById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).ListenerStopById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/ListenerStopById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).ListenerStopById(ctx, req.(*commonpb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_ListenerDeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).ListenerDeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/ListenerDeleteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).ListenerDeleteById(ctx, req.(*commonpb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_ListenerGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).ListenerGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/ListenerGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).ListenerGetById(ctx, req.(*commonpb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_ListenerGetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(commonpb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HermitRPCServer).ListenerGetAll(m, &hermitRPCListenerGetAllServer{stream})
}

type HermitRPC_ListenerGetAllServer interface {
	Send(*Listener) error
	grpc.ServerStream
}

type hermitRPCListenerGetAllServer struct {
	grpc.ServerStream
}

func (x *hermitRPCListenerGetAllServer) Send(m *Listener) error {
	return x.ServerStream.SendMsg(m)
}

func _HermitRPC_PayloadImplantGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayloadImplant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).PayloadImplantGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/PayloadImplantGenerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).PayloadImplantGenerate(ctx, req.(*PayloadImplant))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_PayloadStagerGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayloadStager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).PayloadStagerGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/PayloadStagerGenerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).PayloadStagerGenerate(ctx, req.(*PayloadStager))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_PayloadShellcodeGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayloadShellcode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).PayloadShellcodeGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/PayloadShellcodeGenerate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).PayloadShellcodeGenerate(ctx, req.(*PayloadShellcode))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_AgentGetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).AgentGetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/AgentGetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).AgentGetById(ctx, req.(*commonpb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_AgentGetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(commonpb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HermitRPCServer).AgentGetAll(m, &hermitRPCAgentGetAllServer{stream})
}

type HermitRPC_AgentGetAllServer interface {
	Send(*Agent) error
	grpc.ServerStream
}

type hermitRPCAgentGetAllServer struct {
	grpc.ServerStream
}

func (x *hermitRPCAgentGetAllServer) Send(m *Agent) error {
	return x.ServerStream.SendMsg(m)
}

func _HermitRPC_AgentTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).AgentTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/AgentTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).AgentTaskList(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_TaskSetByAgentName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).TaskSetByAgentName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/TaskSetByAgentName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).TaskSetByAgentName(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_TaskClearByAgentName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).TaskClearByAgentName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/TaskClearByAgentName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).TaskClearByAgentName(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_TaskListByAgentName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).TaskListByAgentName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/TaskListByAgentName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).TaskListByAgentName(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_LootGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).LootGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/LootGetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).LootGetAll(ctx, req.(*Loot))
	}
	return interceptor(ctx, in, info, handler)
}

func _HermitRPC_LootClearByAgentName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermitRPCServer).LootClearByAgentName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.HermitRPC/LootClearByAgentName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermitRPCServer).LootClearByAgentName(ctx, req.(*Loot))
	}
	return interceptor(ctx, in, info, handler)
}

// HermitRPC_ServiceDesc is the grpc.ServiceDesc for HermitRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HermitRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.HermitRPC",
	HandlerType: (*HermitRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _HermitRPC_SayHello_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _HermitRPC_GetVersion_Handler,
		},
		{
			MethodName: "OperatorRegister",
			Handler:    _HermitRPC_OperatorRegister_Handler,
		},
		{
			MethodName: "OperatorDeleteByUuid",
			Handler:    _HermitRPC_OperatorDeleteByUuid_Handler,
		},
		{
			MethodName: "OperatorGetById",
			Handler:    _HermitRPC_OperatorGetById_Handler,
		},
		{
			MethodName: "ListenerStart",
			Handler:    _HermitRPC_ListenerStart_Handler,
		},
		{
			MethodName: "ListenerStartById",
			Handler:    _HermitRPC_ListenerStartById_Handler,
		},
		{
			MethodName: "ListenerStopById",
			Handler:    _HermitRPC_ListenerStopById_Handler,
		},
		{
			MethodName: "ListenerDeleteById",
			Handler:    _HermitRPC_ListenerDeleteById_Handler,
		},
		{
			MethodName: "ListenerGetById",
			Handler:    _HermitRPC_ListenerGetById_Handler,
		},
		{
			MethodName: "PayloadImplantGenerate",
			Handler:    _HermitRPC_PayloadImplantGenerate_Handler,
		},
		{
			MethodName: "PayloadStagerGenerate",
			Handler:    _HermitRPC_PayloadStagerGenerate_Handler,
		},
		{
			MethodName: "PayloadShellcodeGenerate",
			Handler:    _HermitRPC_PayloadShellcodeGenerate_Handler,
		},
		{
			MethodName: "AgentGetById",
			Handler:    _HermitRPC_AgentGetById_Handler,
		},
		{
			MethodName: "AgentTaskList",
			Handler:    _HermitRPC_AgentTaskList_Handler,
		},
		{
			MethodName: "TaskSetByAgentName",
			Handler:    _HermitRPC_TaskSetByAgentName_Handler,
		},
		{
			MethodName: "TaskClearByAgentName",
			Handler:    _HermitRPC_TaskClearByAgentName_Handler,
		},
		{
			MethodName: "TaskListByAgentName",
			Handler:    _HermitRPC_TaskListByAgentName_Handler,
		},
		{
			MethodName: "LootGetAll",
			Handler:    _HermitRPC_LootGetAll_Handler,
		},
		{
			MethodName: "LootClearByAgentName",
			Handler:    _HermitRPC_LootClearByAgentName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OperatorGetAll",
			Handler:       _HermitRPC_OperatorGetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenerGetAll",
			Handler:       _HermitRPC_ListenerGetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AgentGetAll",
			Handler:       _HermitRPC_AgentGetAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpcpb/rpc.proto",
}
