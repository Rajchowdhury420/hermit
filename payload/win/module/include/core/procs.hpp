#ifndef HERMIT_PROCS_HPP
#define HERMIT_PROCS_HPP

#include <windows.h>

// They're used for calculating module/func hashes.
#define HASH_IV                                 0x35
#define RANDOM_ADDR                             0xab10f29f

// Generated by script/calc_hash_func.py
#define HASH_FUNC_NTFLUSHINSTRUCTIONCACHE       0x3a43951d

#define HASH_FUNC_GETPROCADDRESS                0xafa3e09d
#define HASH_FUNC_LOADLIBRARYA                  0x7069f241
#define HASH_FUNC_VIRTUALALLOC                  0x5ae0dabf
#define HASH_FUNC_VIRTUALPROTECT                0x927857d9

namespace Procs
{
    // **NTAPI**

    // NtFlushInstructionCache
    typedef NTSTATUS (NTAPI* LPPROC_NTFLUSHINSTRUCTIONCACHE)(HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);

    // **WINAPI**

    // DllMain
    typedef BOOL (WINAPI* LPPROC_DLLMAIN)(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
    // GetProcAddress
    typedef FARPROC (WINAPI* LPPROC_GETPROCADDRESS)(HMODULE hModule, LPCSTR lpProcName);
    // LoadLibraryA
    typedef HMODULE (WINAPI* LPPROC_LOADLIBRARYA)(LPCSTR lpLibFileName);
    // VirtualAlloc
    typedef LPVOID (WINAPI* LPPROC_VIRTUALALLOC)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
    // VirtualProtect
    typedef BOOL (WINAPI* LPPROC_VIRTUALPROTECT)(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);

    DWORD StringToHashFunc(char* str);
    PVOID GetProcAddressByHash(
        HMODULE hModule,
        DWORD dwHash
    );
}

#endif // HERMIT_PROCS_HPP